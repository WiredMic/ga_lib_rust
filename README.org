#+title: Geometric Algebra Library in Rust

This is a geometric algebra library written in Rust.
It is build to be able to run in an embedded environment.

The library has generic float support.

It supports 3D vector geometric algebra.

More algebras to come.

* vga3d

It has implemented a full 3D Vector Geometric Algebra.

** Properties of the Algebra
- addition, subtraction, inner product, exterior product, geometric product, regressive product: interaction between all grades
- Rotations for all grades through Rotors
- Projection between all grades
- Rejections between all grades
- Reflection between all grades




* Extra Features
Features that can be enabled to compile in extra features.

#+begin_src Rust :export code

[dependencies]
ga_lib = {version = "*" ,features = ["std"]}

#+end_src

** default
Implements no extra features.

** full
Implements all extra features.

** quaternion
When the ~quaternion~ flag is enabled, then quaternion and unit quaternion are available as struct.
Unit quaternions can only rotate vectors and quaternions.

** TODO nalgebra

** std
When the ~std~ flag is enabled, then all Stucts will have an implementation of src_rust[:exports code]{fmt::Display}

#+begin_src Rust :exports code
let vector = Vector::new(2.0,4.0,3.2);
println!("{}",vector);
#+end_src

** defmt
When the ~defmt~ flag is enabled, then all Stucts will have an implementation of src_rust[:exports code]{defmt::Format}

#+begin_src Rust :exports code
let vector = Vector::new(2.0,4.0,3.2);
defmt::info!("{}",vector);
#+end_src


* TODO
- I need to make a test for everything
- regressive product, lowest implementation
